====
    Copyright (C) 2012 Red Hat, Inc. (jdcasey@commonjava.org)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
====

#-------------------------------------------------------------------------------
# Copyright (c) 2014 Red Hat, Inc..
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the GNU Public License v3.0
# which accompanies this distribution, and is available at
# http://www.gnu.org/licenses/gpl.html
# 
# Contributors:
#     Red Hat, Inc. - initial API and implementation
#-------------------------------------------------------------------------------
0. Cycle detection still entering infinite loop, somehow!!

    Need to track that down.

1. Lazy cycle detection with dirty flag on view.

    When updating the db, simply mark cycle detection as pending on all view nodes, instead of incurring cycle detection expense up front. Cycles are only queried in certain use cases, so this expense is best delayed.
    
2. Store selections in view-specific index, managed by AtlasCollector instance.

    Selections driven by view-managed versions or mutations should NOT pollute other views' traverses. To avoid this, need to store selection in an index specific to the view, and hand this to the AtlasCollector on ctor.

3. Store seen paths in view-specific index, managed by visitor.

    Storing in memory will lead to inevitable memory problems for really large traverses. We can page out older seen results by using an index, then delete the index when the traverse completes.
    
4. Add traverseFinished() to visitor.

    Clean up seen index in this method, which MUST be called before collectAtlasRelationships(..) returns.

